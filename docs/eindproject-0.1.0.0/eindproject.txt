-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/berryhijwegen/haskell_eindproject#readme</a>
@package eindproject
@version 0.1.0.0


module Helpers

-- | Get text from user until input is all numeric
readUntilNumeric :: IO String

-- | Basic replace function
replace :: Eq a => a -> a -> [a] -> [a]

-- | Exit program with message
exitWithMessage :: String -> IO a

-- | Create pseudo-random list of n numbers using a seed
randomList :: Int -> Int -> StdGen -> [Int]

-- | Function to generate multiple random seed from one number
getRandomSeed :: Int -> Int -> StdGen


module Position

-- | Get the distance between two Positions
getDistance :: Pos -> Pos -> Int

-- | Alter the position on the given axis with a given value
changePos :: Pos -> Int -> Int -> Pos

-- | Create list of pseudo-random Positions using two seeds
generateRandomPositions :: Int -> Int -> StdGen -> StdGen -> [Pos]

-- | Pathfinding to decide a direction (Up',Down',Right',Left') based on
--   current and target position
decideDirection :: Pos -> Pos -> Direction

-- | Alternative notation of (Int,Int) to make code more readable
type Pos = (Int, Int)

-- | datatype to make Directions more readable and understandable according
--   to the grid.
data Direction
Up' :: Direction
Down' :: Direction
Left' :: Direction
Right' :: Direction


module Creature
getCreatureInfo :: Creature -> String

-- | Retrieve hp level of given Creature
getHp :: Creature -> Int

-- | Increase or decrease hp of given Creature
alterHp :: Int -> Creature -> Creature

-- | Replace the position of a creature based on the given Direction
moveCreature :: Creature -> Direction -> Creature

-- | A Creature will walk through the grid searching for food, trying not
--   to die.
data Creature

-- | Returns positions of given Creature
getCreaturePos :: Creature -> Pos

-- | generate creatures with a pseudo-random position using two seeds
generateCreatures :: Int -> Int -> StdGen -> StdGen -> [Creature]
instance GHC.Classes.Ord Creature.Creature
instance GHC.Classes.Eq Creature.Creature
instance GHC.Show.Show Creature.Creature


module Simulation

-- | Print grid + stats to console for given Simulation
printSimulation :: Simulation -> IO [()]

-- | generate creatures, foods with a pseudo-random position using two
--   seeds
generatePlatform :: Int -> Int -> Int -> Int -> Simulation

-- | Execute every function needed for one "step": 1. Let each Creature do
--   one step. 2. Check if any Creature has collided with food &amp; handle
--   this collision. 3. Decrease HP for every Creature. 4. Remove Creatures
--   which died from Simulation.
stepForward :: Simulation -> Simulation
instance GHC.Show.Show Simulation.Simulation
